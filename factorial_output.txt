## Author: Niranjan Adhikari

## Part 1: Factorial Function 

# Factorial of number n is  n * (n-1) * (n - 2) * . * 1. The factorial of 
# 0 is defined to be 1 and factorial of (-1) is not exist. There is limitation 
# of my code is that it is not expected to run well for a fractional number.

## Loop version 
> Factorial_loop <- function(x=1) {
+   if (x < 0) {
+     print("Sorry, factorial does not exist for negative numbers")
+   } else if (x == 0) {
+     return(1)
+   } else {
+     y <- 1
+     for ( i in 1:x) {
+       y <- y*i
+     }
+     return(y)
+   }
+ }

# Experiment of Loop
> Factorial_loop(4)
[1] 24
> Factorial_loop(0)
[1] 1
> Factorial_loop(-5)
[1] "Sorry, factorial does not exist for negative numbers"
> Factorial_loop(3.5) ##  could not work for fractions and so returns wrong output.
[1] 6
> Factorial_loop("Australia") ## NAs introduced by coercion. loop doesnot work for character.
Error in 1:x : NA/NaN argument
In addition: Warning message:
In Factorial_loop("Australia") : NAs introduced by coercion


## Reduce version 
> library(purrr) # this library is required for reduce() function.
> Factorial_reduce <- function(x=1) {
+   if (x < 0) {
+     print("Sorry, factorial does not exist for negative numbers")
+   } else if (x == 0) {
+     return(1)
+   } else {
+     reduce(as.numeric(1:x), function(x,y) {
+       x * y
+     })
+   }
+ }

# Experiment of reduce
> Factorial_reduce(3)
[1] 6
> Factorial_reduce(0)
[1] 1
> Factorial_reduce(-1)
[1] "Sorry, factorial does not exist for negative numbers"

## Recursion Version
> Factorial_func <- function(x=1) {
+   if (x < 0) {
+     print("Sorry, factorial does not exist for negative numbers")
+   } else if(x == 0) {1}
+   else {x * Factorial_func(x-1)
+   }
+ }

# Experimentof recursion 
> Factorial_func(3)
[1] 6
> Factorial_func(0)
[1] 1
> Factorial_func(-2)
[1] "Sorry, factorial does not exist for negative numbers"

## Memoization version
> Factorial_mem <- function(x=1) {
+   # stopifnot(x >= 0)
+   if (x < 0) {
+     print("Sorry, factorial does not exist for negative numbers")
+   }
+   Fact_tbl<- c(1)
+   Factorial_mem_in <- function(x=1) {
+     if(!is.na(Fact_tbl[x])) {Fact_tbl[x]}
+     
+     else{
+       Fact_tbl[x] <<- x * Factorial_mem_in(x-1)
+       return(Fact_tbl[x])}
+   }
+ }

## The microbenchmark pakage is used to compare the operation time of the functions
> library(microbenchmark) 

## Comparison for n=5 (smaller integer)
> Factorial_performance_1 <- microbenchmark(a <- Factorial_loop(5),
+                                           b <- Factorial_reduce(5),
+                                           c <- Factorial_func(5),
+                                           d <- Factorial_mem(5))
> Factorial_performance_1
Unit: nanoseconds
                     expr   min    lq     mean median    uq     max neval
   a <- Factorial_loop(5)   427   428   930.81    854   854   17920   100
 b <- Factorial_reduce(5) 34987 35840 40508.36  36267 36907  172374   100
   c <- Factorial_func(5)  2134  2561  3055.66   2561  2987   15360   100
    d <- Factorial_mem(5)   427   854 73237.90    854   854 7224744   100
> Factorial_performance_2 <- microbenchmark(a <- Factorial_loop(500),
+                                           b <- Factorial_reduce(500),
+                                           c <- Factorial_func(500),
+                                           d <- Factorial_mem(500))

## Comparison for n=500 (larger integer)
> Factorial_performance_2
Unit: nanoseconds
                       expr    min       lq      mean   median     uq     max neval
   a <- Factorial_loop(500)  17067  17921.0  19512.10  18348.0  19627   42667   100
 b <- Factorial_reduce(500) 338347 364374.0 397525.84 378240.5 408108  842240   100
   c <- Factorial_func(500) 252160 270294.5 352725.92 282667.5 317014 3055360   100
    d <- Factorial_mem(500)    427    854.0   2078.55   1707.5   2987    7681   100

## Note: While comparing the all of the above four different version of a 
# factorial function, we have found that the factorial loop is the fastest for smaller 
# integer while memorization version is fastest for larger integer. 
